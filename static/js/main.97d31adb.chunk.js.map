{"version":3,"sources":["components/Title.js","components/Button.js","components/QuoteDisplay.js","App.js","serviceWorker.js","index.js"],"names":["TitleStyle","color","Title","react_default","a","createElement","style","className","buttonStyle","width","height","backgroundColor","fontSize","borderRadius","textRecoration","marginTop","Button","onClick","window","location","reload","QuoteDisplay","state","loading","fetch","response","json","data","this","setState","quote","Component","App","components_Title","components_QuoteDisplay","components_Button","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAGMA,SAAa,CACjBC,MAAO,SASMC,EAND,kBACVC,EAAAC,EAAAC,cAAA,OAAKC,MAAON,GACVG,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAd,wBCLAC,EAAc,CAClBC,MAAO,QACPC,OAAQ,OACRC,gBAAiB,UACjBV,MAAO,OACPW,SAAU,OACVC,aAAc,MACdC,eAAgB,OAChBC,UAAW,QAkBEC,EAdA,WAKb,OACEb,EAAAC,EAAAC,cAAA,UAAQC,MAAOE,EAAaS,QALV,WAClBC,OAAOC,SAASC,WAIhB,0CCeWC,oNA5BXC,MAAQ,CACNC,SAAS,4MAMM,8DAEMC,MAFN,oEAEXC,kBACaA,EAASC,cAAtBC,SAENC,KAAKC,SAAS,CAACC,MAAOH,EAAMJ,SAAS,uIAKrC,OACEpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,UAAKuB,KAAKN,MAAMC,QAAUpB,EAAAC,EAAAC,cAAA,0BAAyBF,EAAAC,EAAAC,cAAA,eAAOuB,KAAKN,MAAMQ,MAAlB,eAxBlCC,cCgBZC,mLAXX,OACI7B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAD,cANQJ,aCIEK,QACW,cAA7BlB,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.97d31adb.chunk.js","sourcesContent":["import React from 'react'\n\n// Styling Tittle component with JSX object\nconst TitleStyle = {\n  color: \"#000\"\n}\n\nconst Title = () => (\n    <div style={TitleStyle}>\n      <h2 className=\"titleText\">Ron Swanson Quotes</h2>\n    </div>\n)\n\nexport default Title\n","import React from 'react'\n\n\n// Styling Button component with JSX object\nconst buttonStyle = {\n  width: \"700px\",\n  height: \"50px\",\n  backgroundColor: \"#1a8cff\",\n  color: \"#fff\",\n  fontSize: \"18px\",\n  borderRadius: \"5px\",\n  textRecoration: \"none\",\n  marginTop: \"-10%\"\n}\n\n\nconst Button = () => {\n  const HandleClick = () => {\n    window.location.reload()\n  }\n\n  return (\n    <button style={buttonStyle} onClick={HandleClick}>\n      Generate Quote\n    </button>\n    )\n  }\n\n\n\nexport default Button\n","import React, { Component } from 'react'\nimport './css/QuoteDisplay.css' // Styling component with external CSS\n\n\n\nclass QuoteDisplay extends Component {\n\n    // Initialize state of component\n    // In most cases this should be done within the constructor\n    state = {\n      loading: true\n    }\n  \n  \n  // Acynchronous function gets quote from backend or API then changes the state of component when quote has been obtained\n  async componentDidMount(){\n    const QuoteURL = \"https://ron-swanson-quotes.herokuapp.com/v2/quotes\" // URL of API\n    //const QuoteURL = \"http://localhost:5000/get_quote\" // URL of Flask backend endpoint\n    const response = await fetch(QuoteURL)\n    const data = await response.json()\n    // Change state of component\n    this.setState({quote: data, loading: false})\n  }\n\n\n  render(){\n    return(\n      <div className=\"quotesSection\">\n        <div className=\"quoteText\">\n          <em>{this.state.loading ? <div> Loading...</div> : <div>\"{this.state.quote}\"</div>}</em>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default QuoteDisplay\n","import React, { Component } from 'react';\nimport './App.css';\nimport Title from './components/Title'\nimport Button from './components/Button'\nimport QuoteDisplay from './components/QuoteDisplay'\n\n\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"main\">\n          <Title/>\n          <QuoteDisplay/>\n          <Button/>\n        </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}